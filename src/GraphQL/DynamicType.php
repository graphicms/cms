<?php

namespace Graphicms\Cms\GraphQL;

use Rebing\GraphQL\Support\Type as GraphQLType;

class DynamicType extends GraphQLType
{
    protected $inputObject = false;
    protected $enumObject = false;
    protected $unionType = false;

    private $_attributes = [];
    private $_fields = [];
    private $_resolvers = [];
    private $_interfaces = [];

    public function __construct($attributes = [])
    {
        parent::__construct($attributes);
        if(isset($this['input']) && $this['input'] === true) {
            $this->inputObject = true;
        }
    }


    public function attributes()
    {
        return $this->_attributes;
    }

    public function fields()
    {
        $fields = $this->_fields;
        if(count($this->_interfaces) > 0) {
            $interfaces = $this->_interfaces;
            foreach($interfaces as $interface) {
                $fields = array_merge($interface->getFields(), $fields);
            }
        }
        return $fields;
    }

    public function setFields($fields)
    {
        $this->_fields = $fields;
    }

    public function interfaces()
    {
        return $this->_interfaces;
    }

    public static function make($attributes, $fields, $resolvers = [], $interfaces = [])
    {
        $att = [];
        if(isset($attributes['resolver']))
            $att['resolver'] = $attributes['resolver'];
        if(isset($attributes['input']))
            $att['input'] = $attributes['input'];
        $static = new static($att);
        $static->_attributes = $attributes;
        $static->_fields = $fields;
        $static->_resolvers = $resolvers;
        $static->_interfaces = $interfaces;

        return ($static);
    }

    protected function getFieldResolver($name, $field)
    {
        if(isset($field['resolve']))
        {
            return $field['resolve'];
        }

        $resolveMethod = 'resolve'.studly_case($name).'Field';

        if(method_exists($this, $resolveMethod) || array_key_exists($resolveMethod, $this->_resolvers))
        {
            return function() use ($resolveMethod)
            {
                $args = func_get_args();
                return $this->{$resolveMethod}($args);
            };
        }

        return null;
    }

    public function getAttributes()
    {
        $attributes = $this->attributes();
        $interfaces = $this->interfaces();

        $attributes = array_merge($this->attributes, [
            'fields' => function () {
                $fields = $this->getFields();
                foreach($fields as &$field) {
                    if(is_array($field) && is_callable($field['type'])) {
                        $field['type'] = $field['type']();
                    }
                }
                $this->setFields($fields);
                return $this->getFields();
            }
        ], $attributes);

        if(sizeof($interfaces))
        {
            $attributes['interfaces'] = $interfaces;
        }

        return $attributes;
    }

//    public function toArray()
//    {
//        foreach($this->_fields)
//        $arr = $this->getAttributes();
////        dump($arr);
//        return $this->getAttributes();
//    }

    public function __call($method, $parameters)
    {
        if(array_key_exists($method, $this->_resolvers)) {
            return call_user_func_array($this->_resolvers[$method], ...$parameters);
        }
        return parent::__call($method, $parameters); // TODO: Change the autogenerated stub
    }


}